PROGRESS: 


  Clojure                         R                         IMPLEMENTED    TESTED
  ------------------------------------------------------------------------------
        aes.cljc
  "encrypt"                       "encrypt"                 y               output mismatch
  "decrypt"                       "decrypt"                 y               output mismatch
  
        encodings.cljc
  "pad-hex"                       "pad_hex"                 y               y
  "biginteger->hex"               "biginteger_to_hex"       y               y
  "biginteger->bytes"             "biginteger_to_bytes"     y               y
  "bytes->biginteger"             "bytes_to_biginteger"     y               y
  "hex->biginteger"               "hex_to_biginteger"       y               y
NOTE:  the biginteger functions have all been implemented and tested in C; they
still need to be integerated with the R package.
  
  "byte->int"                     "byte_to_int"             y               y
  "pad-to-length"                 "pad_to_length"           y               y
  "compute-point"                 "compute_point"
  "x962-hex-compressed-decode"
  "x962-hex-uncompressed-decode"
  "x962-decode"
  "x962-encode"
  "DER-decode-standard"
  "DER-decode"
  "DER-decode-ECDSA-signature"
  "DER-encode-ECDSA-signature"
  
        hmac.cljc
"hmac-sha256"                     "hmac_sha256"             y               y

        jws.cljc
"b64"                             "b64"                     y               y
"sign"                            "sign"                    calls the secp256k1 sign function
"serialize-jws"                   "serialize_jws"           dependent on secp256k1 sign function
"deserialize-jws"                 "deserialize_jws"         y
"verify"                          "verify"                  dependent on secp256k1 sign function

        ripemd.cljc
"ripemd-160"                      "ripemd_160"              y               y

        scrypt.cljc
"random-bytes"                    "random_bytes"            y               y
"encrypt"                         "encrypt"                 y               y
"check"                           "check"                   y               y


The following functions work in C.  They still need to be integrated to R with corresponding wrapper functions
        secp256k1.cljc
"valid-private"                                             y               y
"format-public-key"                                         y               y
"format-key-pair"                                           y               y
"public-key-from-private"                                   y               y  
"pub-key->bytes"
"->byte-array"
"get-sin-from-public-key"
"new-private-key"                                           y               y
"generate-key-pair"                                         y               y
"deterministic-generate-k"
"compute-recovery-byte"
"sign-hash"
"sign"
"ecrecover"
"recover-public-key-from-hash"
"recover-public-key"
"verify-signature-from-hash"
"verify"

        sha2.cljc
"sha2-256"                        "sha2_256"                y               y
"sha2-256-normalize"              "sha2_256_normalize"      y               y
"sha2-512"                        "sha2_512"                y               y
"sha2-512-normalize"              "sha2_512_normalize"      y               y

        sha3.cljc
"sha3-256"                        "sha2_256"                y               y
"sha3-256-normalize"              "sha2_256_normalize"      y               y
"sha3-512"                        "sha2_512"                y               y
"sha3-512-normalize"              "sha2_512_normalize"      y               y

        util.cljc
"hash-string-key"                 "hash_string_key"         y               y

        crypto.cljc
"normalize-string"                "normalize_string"        y               y
"coerce-input-format"             "coerce_input_format"     y               y
"string->byte-array"              "string_to_byte_array"    y               y
"account-id-from-public"
"account-id-from-private"
"account-id-from-message"