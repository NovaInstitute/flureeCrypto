% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sign.R
\name{deterministic_generate_k}
\alias{deterministic_generate_k}
\title{Deterministically Generate k for ECDSA Signing (RFC 6979)}
\usage{
deterministic_generate_k(hash_raw, private_key_raw, curve_name = "secp256k1")
}
\arguments{
\item{hash_raw}{A raw byte array representing the message hash.}

\item{private_key_raw}{A raw byte array representing the private key.}

\item{curve_name}{A string representing the curve name (default is "secp256k1").}
}
\value{
A raw byte array representing the deterministic \code{k} value.
}
\description{
This function generates a deterministic \code{k} value for ECDSA signing based on RFC 6979.
It uses the HMAC-SHA256 algorithm and is specifically designed for the secp256k1 curve.
}
\examples{
hash_raw <- openssl::sha256(charToRaw("Hello, blockchain!"))
private_key_raw <- sodium::hex2bin("1E99423A4ED27608A15A2616A2B9245621A89E834046E0BC3A707855853D7E58")
k <- deterministic_generate_k(hash_raw, private_key_raw)
print(sodium::bin2hex(k))

}
