% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jws.R, R/secp256k1_wrapper.R
\name{sign}
\alias{sign}
\title{Sign a message using secp256k1 private key}
\usage{
sign(message, private_key)

sign(message, private_key)
}
\arguments{
\item{message}{A character string or raw vector representing the message to be signed.}

\item{private_key}{A private key used for signing, given either as a hex-encoded string or a raw vector.}

\item{signing_input}{The message to be signed as a raw vector or string.}

\item{signing_key}{The secp256k1 private key used for signing.}
}
\value{
A signature as a raw vector.

A hex-encoded string representing the DER-encoded ECDSA signature.
}
\description{
This function signs the provided input using a secp256k1 private key and SHA-256 hash algorithm.

This function hashes the input message using SHA-256 and signs the resulting hash using the provided private key.
The signing process uses the secp256k1 curve via the \code{libsecp256k1} C library.
}
\details{
The function first hashes the message using SHA-256, then signs the hash with the provided private key using
the secp256k1 curve. It can optionally generate a recovery byte as part of the signature.
}
\examples{
sign("message to sign", my_signing_key)
# Sign a message with a hex-encoded private key
message <- "Hello, World!"
private_key <- "1e99423a4ed27608a15a2616a2b7c778943e87158c9993bbbd4a889eeaf63bfc"
signature <- sign(message, private_key)
cat("Signature:", signature, "\n")

}
